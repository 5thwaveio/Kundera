package com.impetus.client.crud.autogeneratedid;

import java.util.HashSet;
import java.util.List;
import java.util.Set;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;
import javax.persistence.Query;

import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.Test;

import com.impetus.client.utils.MongoUtils;
import com.impetus.kundera.metadata.model.KunderaMetadata;

public class OneToManyAutoGenerationTest
{
    private static final String _PU = "mongoTest";

    /** The emf. */
    private static EntityManagerFactory emf;

    /** The em. */
    private static EntityManager em;

    @Before
    public void setUp() throws Exception
    {
        emf = Persistence.createEntityManagerFactory(_PU);
        em = emf.createEntityManager();
    }

    @Test
    public void testUser()
    {
        AutoGeneratedUser user1 = new AutoGeneratedUser();
        user1.setName("test1");

        Set<Document> documents = new HashSet<Document>();

        Document document1 = new Document();
        document1.setName("Doc 1");

        documents.add(document1);

        Document document2 = new Document();
        document2.setName("Doc 2");

        documents.add(document2);

        user1.setDocuments(documents);

        em.persist(user1);

        Query q = em.createQuery("select u from AutoGeneratedUser u where u.name = 'test1'");
        List<AutoGeneratedUser> users = q.getResultList();
        Assert.assertNotNull(users);
        AutoGeneratedUser autoGeneratedUser = users.get(0);
        Assert.assertNotNull(autoGeneratedUser.getDocuments());
        Assert.assertEquals(2, autoGeneratedUser.getDocuments().size());
        for (Document document : autoGeneratedUser.getDocuments())
        {
            Assert.assertNotNull(document.getUser());
            Assert.assertEquals("test1", document.getUser().getName());
        }

        Document document3 = new Document();
        document3.setName("Doc 3");

        autoGeneratedUser.getDocuments().add(document3);

        em.persist(autoGeneratedUser);

        em.clear();

        q = em.createQuery("select u from AutoGeneratedUser u where u.name = 'test1'");
        users = q.getResultList();
        Assert.assertNotNull(users);
        autoGeneratedUser = users.get(0);
        Assert.assertNotNull(autoGeneratedUser.getDocuments());
        Assert.assertEquals(3, autoGeneratedUser.getDocuments().size());
        for (Document document : autoGeneratedUser.getDocuments())
        {
            Assert.assertNotNull(document.getUser());
            Assert.assertEquals("test1", document.getUser().getName());
        }
        Document document4 = new Document();
        document4.setName("Doc 4");
        document4.setDocumentID("doc4");

        autoGeneratedUser.getDocuments().add(document4);

        em.merge(autoGeneratedUser);
        
        em.clear();

        q = em.createQuery("select u from AutoGeneratedUser u where u.name = 'test1'");
        users = q.getResultList();
        Assert.assertNotNull(users);
        autoGeneratedUser = users.get(0);
        Assert.assertNotNull(autoGeneratedUser.getDocuments());
        Assert.assertEquals(4, autoGeneratedUser.getDocuments().size());
        for (Document document : autoGeneratedUser.getDocuments())
        {
            Assert.assertNotNull(document.getUser());
            Assert.assertEquals("test1", document.getUser().getName());
        }
        boolean persisted = false;
        for (Document document : autoGeneratedUser.getDocuments())
        {
            if (document.getDocumentID().equals("doc4"))
            {
                Assert.assertEquals("Doc 4", document.getName());
                persisted = true;
            }
        }
        Assert.assertTrue(persisted);

    }

    @After
    public void tearDown()
    {
        em.close();
        MongoUtils.dropDatabase(emf, _PU);
        emf.close();
        KunderaMetadata.INSTANCE.setApplicationMetadata(null);
    }
}